}
}
# Lav en konfusionmatrix
library(caret)
Vækst_factor <- as.factor(FTIs_1998$Dummy_variabel)
prediction_factor <- as.factor(predictions_all)
confusion_matrix <- confusionMatrix(prediction_factor, Vækst_factor)
print(confusion_matrix)
freq_vaekst
# Make the chart
ggplot(freq_vaekst, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity", position="dodge") +
theme_minimal() +
labs(x="Udvikling af kvartalvis årelige realvækst af husholdningernes forbrugsudgifter,
Op = 1, Ned = 0", y="Antal af kvartaler", title="Husholdningernes forbrugsudgift går op 77% af kvartalerne")
# Dan en ny dataframe for indikatorerne
predict_forbrug_all <- data.frame(
Q1_Fam_nu = FTIs_1998$Q1_Fam_nu,
Q3_Dan_nu = FTIs_1998$Q3_Dan_nu,
Q5_Forbrugsgoder_nu = FTIs_1998$Q5_Forbrugsgoder_nu,
Q9_Forbrugsgoder_etår = FTIs_1998$Q9_Forbrugsgoder_etår
)
# Forudsig sandsynlighed for, at forbruget går op (1)
prediction_probabilities <- predict(DI_logistic_model, predict_forbrug_all, type = "response")
# Lav en vector for sandsynligheder
predictions_all <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(prediction_probabilities)) {
# Check if the current value is NA
if (is.na(prediction_probabilities[i])) {
predictions_all[i] <- "unknown"  # Or some other label for missing values
} else if (prediction_probabilities[i] > 0.5) {
predictions_all[i] <- "1"
} else {
predictions_all[i] <- "0"
}
}
# Lav en konfusionmatrix
library(caret)
Vækst_factor <- as.factor(FTIs_1998$Dummy_variabel)
prediction_factor <- as.factor(predictions_all)
confusion_matrix <- confusionMatrix(prediction_factor, Vækst_factor)
print(confusion_matrix)
#Reference 0  1
#0         11  4
#1         14 78
# Accurancy: 83,2%
# Lav en ROC kurve for den oprindlige forudsigelse
library(pROC)
roc_original <- roc(Vækst_factor, prediction_probabilities)
plot(roc_original, col="blue", main="ROC kurve for den oprindelige forudsigelse")
optimal_threshold
library(caret)
library(pROC)
######## Scenario 1: optimal threshold
#Extract sensitivity, specificity, and thresholds
sensitivities <- roc_original$sensitivities
specificities <- roc_original$specificities
thresholds <- roc_original$thresholds
#Calculate Youden's J statistic
youden_j <- sensitivities + specificities - 1
#Find the index of the maximum J statistic
optimal_index <- which.max(youden_j)
#Get the optimal threshold
optimal_threshold <- thresholds[optimal_index]prediction_sce1 <- c()
library(caret)
library(pROC)
######## Scenario 1: optimal threshold
#Extract sensitivity, specificity, and thresholds
sensitivities <- roc_original$sensitivities
specificities <- roc_original$specificities
thresholds <- roc_original$thresholds
#Calculate Youden's J statistic
youden_j <- sensitivities + specificities - 1
#Find the index of the maximum J statistic
optimal_index <- which.max(youden_j)
#Get the optimal threshold
optimal_threshold <- thresholds[optimal_index]
#### Convert the predictions
prediction_sce1 <- c()
for (i in 1:length(prediction_probabilities)) {
# Check if the current value is NA
if (is.na(prediction_probabilities[i])) {
prediction_sce1[i] <- "unknown"  # Or some other label for missing values
} else if (prediction_probabilities[i] > 0.7252824) {
prediction_sce1[i] <- "1"
} else {
prediction_sce1[i] <- "0"
}
}
prediction_sce1 <- as.factor(prediction_sce1)
confusion_matrix_sce1 <- confusionMatrix(prediction_sce1, Vækst_factor)
print(confusion_matrix_sce1)
#Reference  0  1
#0          17 18
#1          8 64
# accurancy: 75,7%
##### Scenario 2: remove insignificant variables and run the model again
# Remove Fam_nu
logistic_model_sce21 <- glm(Dummy_variabel ~ Q3_Dan_nu + Q5_Forbrugsgoder_nu + Q9_Forbrugsgoder_etår,
data = FTIs_1998, family = binomial)
summary(logistic_model_sce21)
#Remove Forbrugsgoder_nu
logistic_model_sce22 <- glm(Dummy_variabel ~ Q3_Dan_nu + Q9_Forbrugsgoder_etår,
data = FTIs_1998, family = binomial)
summary(logistic_model_sce22)
#Remove Forbrugsgoder_etår
logistic_model_sce23 <- glm(Dummy_variabel ~ Q3_Dan_nu,
data = FTIs_1998, family = binomial)
summary(logistic_model_sce23)
# Dan en ny dataframe for indikatoren
predict_forbrug_sce23 <- data.frame(
Q3_Dan_nu = FTIs_1998$Q3_Dan_nu)
# Forudsig sandsynlighed for, at forbruget går op (1)
prediction_probabilities_sce23 <- predict(logistic_model_sce23, predict_forbrug_sce23, type = "response")
# Lav en vector for sandsynligheder
prediction_sce23 <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(prediction_probabilities_sce23)) {
# Check if the current value is NA
if (is.na(prediction_probabilities_sce23[i])) {
prediction_sce23[i] <- "unknown"  # Or some other label for missing values
} else if (prediction_probabilities_sce23[i] > 0.5) {
prediction_sce23[i] <- "1"
} else {
prediction_sce23[i] <- "0"
}
}
# Lav en konfusionmatrix
prediction_sce23 <- as.factor(prediction_sce23)
confusion_matrix_sce23 <- confusionMatrix(prediction_sce23, Vækst_factor)
print(confusion_matrix_sce23)
#Reference 0  1
#0       12  3
#1       13 79
# accurancy: 85,05%
# Lav en ROC kurve
roc_sce23 <- roc(Vækst_factor , prediction_probabilities_sce23)
plot(roc_sce23, col="blue", main="ROC kurve for scenario 2.3")
#####NOT UPDATED ############ Scenario x: Fjern 2022+ og dan en ny model for sandsynligheder
# Skær dataen ved slutningen af 2021
forbrug__sce2 <- as.data.frame(FTIs_1998[1:88,])
# Løb en ny logistisk regression model
logistic_model_sce2 <- glm(Dummy_variabel ~ Q1_Fam_nu + Q3_Dan_nu + Q5_Forbrugsgoder_nu + Q9_Forbrugsgoder_etår,
data = forbrug__sce2, family = binomial)
summary(logistic_model_sce2)
# Forudsig sandsynlighed for, at forbruget går op (1)
# Brug predict_forbrug_all fra opgave 3.3
prediction_probabilities_sce2 <- predict(logistic_model_sce2, predict_forbrug_all, type = "response")
# Dan en vector for fortolkninger og løb loopen
prediction_sce2 <- NULL
for (i in 1:length(prediction_probabilities_sce2)) {
# Check if the current value is NA
if (is.na(prediction_probabilities_sce2[i])) {
prediction_sce2[i] <- "unknown"  # Or some other label for missing values
} else if (prediction_probabilities_sce2[i] > 0.5) {
prediction_sce2[i] <- "1"
} else {
prediction_sce2[i] <- "0"
}
}
# Lav en konfusionsmatrix
prediction_sce2 <- as.factor(prediction_sce2)
confusion_matrix_sce2 <- confusionMatrix(prediction_sce2, Vækst_factor)
print(confusion_matrix_sce2)
#         Reference
#Prediction  0  1
#         0 10  7
#         1 12 70
# accurancy: 80,8%
# Lav en ROC kurve
roc_sce2 <- roc(Vækst_factor , prediction_probabilities_sce2)
plot(roc_sce2, col="blue", main="ROC kurve for Scenario 2")
print(confusion_matrix_sce1)
View(ftillid_K)
library(caret)
library(pROC)
##### Scenario 2: remove insignificant variables and run the model again
# Remove Fam_nu
logistic_model_sce21 <- glm(Dummy_variabel ~ Q3_Dan_nu + Q5_Forbrugsgoder_nu + Q9_Forbrugsgoder_etår,
data = FTIs_1998, family = binomial)
summary(logistic_model_sce21)
#Remove Forbrugsgoder_nu
logistic_model_sce22 <- glm(Dummy_variabel ~ Q3_Dan_nu + Q9_Forbrugsgoder_etår,
data = FTIs_1998, family = binomial)
summary(logistic_model_sce22)
#Remove Forbrugsgoder_etår
logistic_model_sce23 <- glm(Dummy_variabel ~ Q3_Dan_nu,
data = FTIs_1998, family = binomial)
summary(logistic_model_sce23)
# Lav en ROC kurve
roc_sce23 <- roc(Vækst_factor , prediction_probabilities_sce23)
plot(roc_sce23, col="blue", main="ROC kurve for scenario 2.3")
plot(roc_sce23, col="blue", main="ROC kurve for scenario med kun signifikate variable")
plot(roc_original, col="blue", main="ROC kurve for den oprindelige forudsigelse")
# Plot dataen
library(ggplot2)
ggplot(ftillid_K, aes(x=TID, y=FTI), size=2) +
geom_line() +
geom_point() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
geom_point(aes(x = max_x, y = max_forbruger, color="Højeste 2006 K1"), size=5) +
geom_point(aes(x = min_x, y = min_forbruger, color="Laveste 2022 K4"), size=5) +
scale_color_manual(values = c("Højeste 2006 K1" = "green", "Laveste 2022 K4" = "red")) +
labs(x="Kvartaler", y= "DSTs forbrugertillidsindikator", title="Udviklingen af forbrugertillidsindikatoren fra Danmarks Statistik") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("1996-03-01", "2024-09-01"))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Forbrugsgoder, aes(x = TID, y = Q5_Forbrugsgoder_nu)) +
geom_line(aes(color = "Forbrugsgoder", linetype = "Forbrugsgoder"), size = 0.5) +
geom_point(aes(color = "Forbrugsgoder"), size = 1) +
geom_hline(aes(yintercept = forbrugsgoder_mean, color = "Gennemsnit", linetype = "Gennemsnit"), size = 1) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
labs(
x = "Kvartaler",
y = "DSTs indikator for at anskaffe større forbrugsgoder",
title = "Udvikling af indikatoren for køb af større forbrugsgoder",
color = "Linjer",
linetype = "Linjer"
) +
scale_color_manual(values = c("Forbrugsgoder" = "black", "Gennemsnit" = "orange")) +
scale_linetype_manual(values = c("Forbrugsgoder" = "solid", "Gennemsnit" = "solid")) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("2000-03-01", "2024-09-01"))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
forbrugsgoder_mean
library(dkstat)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
####### Hent data på de forskellige forbrugsgrupper
forbrugsgrupper <- dst_meta(table="NAHC021", lang="da")
forbrugsgrupper$values
query_forbrugsgrupper <- list(
FORMAAAL= c("Fødevarer mv.", "Drikkevarer og tobak mv.",
"Beklædning og fodtøj", "Boligbenyttelse",
"Elektricitet, fjernvarme og andet brændsel",
"Boligudstyr, husholdningstjenester mv.",
"Medicin, lægeudgifter o.l.",
"Køb af køretøjer", "Drift af køretøjer og transporttjenester",
"Information og kommunikation",
"Fritid, sport og kultur", "Undervisning",
"Restauranter og hoteller",
"Forsikring og finansielle tjenester",
"Andre varer og tjenester"),
PRISENHED="2020-priser, kædede værdier",
Tid="*"
)
forbrugsgrupper <- dst_get_data(table="NAHC021", query=query_forbrugsgrupper, lang="da")
# Fjern unødvendig pris kolonne
forbrugsgrupper <- forbrugsgrupper[,-2]
# Justèr fra lang til brede
forbrugsgrupper_wide <- forbrugsgrupper %>% pivot_wider(names_from=FORMAAAL, values_from=value)
# Dan en dataframe for 2020-2023
forbrugsgrupper_period <- forbrugsgrupper_wide[forbrugsgrupper_wide$TID >= "2020-01-01" &
forbrugsgrupper_wide$TID <= "2023-01-01", ]
# Pivot til lange format og plot forbruget for 2023
forbrug_2023 <- as.data.frame(as.matrix(forbrugsgrupper_period[4,c(1:16)]))
forbrug_2023 <- forbrug_2023 %>%  pivot_longer(cols = -TID, names_to = "Vare_Service", values_to = "Forbrug")
forbrug_2023$Forbrug <- as.numeric(forbrug_2023$Forbrug)
forbrug_2023$Forbrug <- forbrug_2023$Forbrug/1000 # to remove scientific e
forbrug_2023 <- forbrug_2023 %>%
mutate(Vare_Service = factor(Vare_Service, levels = Vare_Service[order(Forbrug)]))
# Dan flere grønne farver til at bruge i plotten
green_palette <- colorRampPalette(brewer.pal(9, "Greens"))(15)
ggplot(forbrug_2023, aes(x = Vare_Service, y = Forbrug, fill=Vare_Service)) +
geom_bar(stat = "identity") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centrér og gør titlen fed
axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x="Forbrugsgrupper", y="Forbrug i  mia. DKK", title="Danske husholdninger brugte fleste penge på boligbenyttelse i 2023") +
scale_fill_manual(values = green_palette)
# Pull an example
regres_liste[["DI_FTI"]][["Fødevarer"]]
predict_forbrug
2.44 + (0.02 * -9.5) + (0.05 * -11.15) + (-0.06 * -14.6) + (0.25 * -5.85)
0.02 * -9.5
0.05 * -11.15
-0.06 * -14.6
0.25 * -5.85
2.44 + (-0.19) + (-0.5575) + (0.876) + (-1.4625)
2.71828^1.106
3,022/4,022
3.022/4.022
# Svar
print(paste("Den årlige vækst i husholdningernes forbrugudgift i 4. kvartal 2024 går", prediction))
prediction_prob
summary(DI_logistic_model)
0.01555 * -9.5
0.05393 * -11.15
-0.06195 * -14.6
0.24717 * -5.85
2.44271 + (0.01555 * -9.5) + (0.05393 * -11.15) + (-0.06195 * -14.6) + (0.24717 * -5.85)
2.44271 + (-0.147725) + (-0.6013195) + (0.90447) + (-1.445944)
2.71828^1.152191
3.165118/4.165118
prediction_prob
library(eurostat)
library(restatapi)
library(tidyverse)
forbrug_vækst
View(forbrug__sce2)
View(forbrug_vækst)
View(forbrug_EU_meta)
View(forbrug_EU)
forbrug_EU_values <- get_eurostat_dsd("namq_10_fcs") # overview of values
forbrug_EU_meta <- get_eurostat_data("namq_10_fcs") # get the data
# filter the raw data
forbrug_EU <- forbrug_EU_meta %>%
filter(str_detect(geo, "DK|BE|NL|SE|AT|DE|FR|IT|ES") &
str_detect(na_item, "P31_S14") &
str_detect(unit, "CLV20_MEUR") &
str_detect(s_adj, "SCA"))
forbrug_EU <- forbrug_EU[,4:6] # remove unnecessary columns
View(forbrug_EU)
forbrug_EU <- forbrug_EU %>% pivot_wider(names_from = geo, values_from = values) # pivot to per country
View(forbrug_vækst)
row.names(forbgrug_vækst)
row.names(forbgrug_vækst) <- NULL
row.names(forbrug_vækst) <- NULL
library(ggplot2)
library(RColorBrewer)
# plot the averages
ggplot(gns_vækst, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="Sverige har den højeste gennemsnitlige kvartalvis årlige realvækst i forbrug for perioden 2000-Q1 til 2024-Q2",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_brewer(palette="Greens")
View(forbrug_vækst)
# plot the averages
ggplot(gns_vækst_uden_korona, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="Sverige har den højeste gennemsnitlige kvartalvis årlige realvækst i forbrug for perioden 2000-Q1 til 2024-Q2 men uden koronatiden",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_brewer(palette="Greens")
# Create the bar chart
ggplot(combined_gns, aes(x=Land, y=GNS, fill=Type)) +
geom_bar(stat="identity", position="dodge") +
labs(title="Gennemsnitlig realvækst i forbrug: Med og uden koronatiden",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1))
# plot the averages
ggplot(gns_vækst_uden_korona, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="Sverige har den højeste gennemsnitlige kvartalvis årlige realvækst i forbrug for perioden 2000-Q1 til 2024-Q2 uden koronatiden",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_brewer(palette="Greens")
# plot the averages
ggplot(gns_vækst_uden_korona, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="Sverige har den højeste gennemsnitlige realvækst i forbrug for perioden 2000-Q1 til 2024-Q2 uden koronatiden",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_brewer(palette="Greens")
# Create the bar chart
ggplot(combined_gns, aes(x=Land, y=GNS, fill=Type)) +
geom_bar(stat="identity", position="dodge") +
labs(title="Gennemsnitlig realvækst i forbrug: Med og uden koronatiden",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1))
# Combine the data
gns_vækst$Type <- "Med Corona-kvartaler"
gns_vækst_uden_korona$Type <- "Uden Corona-kvartaler"
# Create the bar chart
ggplot(combined_gns, aes(x=Land, y=GNS, fill=Type)) +
geom_bar(stat="identity", position="dodge") +
labs(title="Gennemsnitlig realvækst i forbrug: Med og uden koronatiden",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1))
combined_gns <- rbind(gns_vækst, gns_vækst_uden_korona)
# Create the bar chart
ggplot(combined_gns, aes(x=Land, y=GNS, fill=Type)) +
geom_bar(stat="identity", position="dodge") +
labs(title="Gennemsnitlig realvækst i forbrug: Med og uden koronatiden",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1))
library(skimr)
library(RColorBrewer)
# plot the averages
ggplot(gns_vækst_alle, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="Sverige har den højeste gennemsnitlige kvartalvis årlige realvækst i forbrug for perioden 2020-Q1 til 2024-Q2",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_manual(values = green_palette)
forbrug_EU_allelande <- forbrug_EU_meta %>%
filter(str_detect(na_item, "P31_S14") &
str_detect(unit, "CP_MEUR") &
str_detect(s_adj, "SCA") &
str_detect(time, "^(2019|2020|2021|2022|2023|2024)-(Q[1-2]|Q[3]|Q[4])$"))
# remove the unnecessary columns
forbrug_EU_allelande <- forbrug_EU_allelande[,4:6]
# Pivot to wider
forbrug_EU_allelande <- pivot_wider(
data = forbrug_EU_allelande,
names_from = geo,
values_from = values
)
# look for NAs
skim(forbrug_EU_allelande)
# remove UK and remove Q3 2024 because of NAs
forbrug_EU_allelande <- forbrug_EU_allelande[-23,-34]
# Define columns for the loop
kolonner_EU <- c(colnames(forbrug_EU_allelande[2:33]))
## Initiate a new data frame
forbrug_allelande_vækst <- forbrug_EU_allelande[,1]
# Loop over each column in kolonner_EU and add the realvækst data
for (kolonne in kolonner_EU) {
forbrug_allelande_vækst <- forbrug_allelande_vækst %>%
mutate(!!paste0("realvækst_", kolonne) := {
realvækst_EU <- diff(log(as.numeric(forbrug_EU_allelande[[kolonne]])), lag= 4) * 100
realvækstna_EU <- c(rep(NA, 4), realvækst_EU)
realvækstna_EU
})
}
# remove NAs
forbrug_allelande_vækst <- forbrug_allelande_vækst[-c(1:4),]
# calculate the averages
gns_vækst_alle <- data.frame(Land=kolonner_EU, GNS=colMeans(forbrug_allelande_vækst[,2:33]))
gns_vækst_alle$Land <- factor(gns_vækst_alle$Land, levels = gns_vækst_alle$Land[order(-gns_vækst_alle$GNS)])
# Create a color pallette that has 32 options
green_palette <- brewer.pal(9, "Greens")
green_palette <- colorRampPalette(green_palette)(32)
# plot the averages
ggplot(gns_vækst_alle, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="Sverige har den højeste gennemsnitlige kvartalvis årlige realvækst i forbrug for perioden 2020-Q1 til 2024-Q2",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_manual(values = green_palette)
View(forbrug_EU_allelande)
# remove UK and remove Q3 2024 because of NAs
forbrug_EU_allelande <- forbrug_EU_allelande[-23,-c(10:13,17,34)]
# Define columns for the loop
kolonner_EU <- c(colnames(forbrug_EU_allelande[2:33]))
# Define columns for the loop
kolonner_EU <- c(colnames(forbrug_EU_allelande[2:31]))
## Initiate a new data frame
forbrug_allelande_vækst <- forbrug_EU_allelande[,1]
# Loop over each column in kolonner_EU and add the realvækst data
for (kolonne in kolonner_EU) {
forbrug_allelande_vækst <- forbrug_allelande_vækst %>%
mutate(!!paste0("realvækst_", kolonne) := {
realvækst_EU <- diff(log(as.numeric(forbrug_EU_allelande[[kolonne]])), lag= 4) * 100
realvækstna_EU <- c(rep(NA, 4), realvækst_EU)
realvækstna_EU
})
}
# remove NAs
forbrug_allelande_vækst <- forbrug_allelande_vækst[-c(1:4),]
# calculate the averages
gns_vækst_alle <- data.frame(Land=kolonner_EU, GNS=colMeans(forbrug_allelande_vækst[,2:33]))
gns_vækst_alle$Land <- factor(gns_vækst_alle$Land, levels = gns_vækst_alle$Land[order(-gns_vækst_alle$GNS)])
# Create a color pallette that has 32 options
green_palette <- brewer.pal(9, "Greens")
green_palette <- colorRampPalette(green_palette)(32)
# plot the averages
ggplot(gns_vækst_alle, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="...",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_manual(values = green_palette)
# calculate the averages
gns_vækst_alle <- data.frame(Land=kolonner_EU, GNS=colMeans(forbrug_allelande_vækst[,2:33]))
# calculate the averages
gns_vækst_alle <- data.frame(Land=kolonner_EU, GNS=colMeans(forbrug_allelande_vækst[,2:31]))
gns_vækst_alle$Land <- factor(gns_vækst_alle$Land, levels = gns_vækst_alle$Land[order(-gns_vækst_alle$GNS)])
# Create a color pallette that has 32 options
green_palette <- brewer.pal(9, "Greens")
green_palette <- colorRampPalette(green_palette)(32)
green_palette <- colorRampPalette(green_palette)(30)
# plot the averages
ggplot(gns_vækst_alle, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="...",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_manual(values = green_palette)
View(forbrug_allelande_vækst)
View(forbrug_allelande_vækst)
# Finde the biggest downturn
max_dowturn <- min(forbrug_allelande_vækst)
str(forbrug_allelande_vækst)
# Find the minimum value in the dataframe
max_downturn <- min(forbrug_allelande_vækst[2:31])
# Find the row and column index of the minimum value
md_location <- which(forbrug_allelande_vækst == max_downturn, arr.ind = TRUE)
max_downturn
md_location
library(ggplot2)
library(RColorBrewer)
# plot the averages
ggplot(gns_vækst, aes(x=Land, y=GNS, fill=Land)) +
geom_bar(stat="identity") +
labs(title="Sverige har den højeste gennemsnitlige kvartalvis årlige realvækst i forbrug for perioden 2000-K1 til 2024-K3",
x="Land", y="Gennemsnitlig realvækst") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_brewer(palette="Greens")
